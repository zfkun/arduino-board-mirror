# .github/workflows/mirror-json.yml

name: Mirror JSON Files

on:
  schedule:
    - cron: '0 * * * *' # 默认定时规则。可手动修改为其他值，如需完全动态，请使用 repository dispatch 或外部触发器
  workflow_dispatch:

jobs:
  mirror-json:
    runs-on: ubuntu-latest
    env:
      GH_MIRROR: ${{ vars.GH_MIRROR }}
      JSON_URLS: ${{ vars.JSON_URLS }}

    steps:
      - name: 检出仓库
        uses: actions/checkout@v3
      
      - name: 安装 GitHub CLI
        run: |
          sudo apt-get install gh -y
          gh auth login --with-token <<< "${{ secrets.GH_PUSH_TOKEN }}"

      - name: 设置 Python 环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 安装依赖
        run: |
          pip install requests

      - name: 执行镜像处理脚本
        id: mirror_script
        run: |
          exit_code=0
          python scripts/mirror_json.py || exit_code=$?
          if [ "$exit_code" -eq 78 ]; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
          elif [ "$exit_code" -ne 0 ]; then
            exit $exit_code
          fi
      
      # - name: 检查是否有文件变更
      #   id: check_changes
      #   run: |
      #     git add -A
      #     if git diff-index --quiet HEAD --; then
      #       echo "has_changes=false" >> $GITHUB_OUTPUT
      #     else
      #       echo "has_changes=true" >> $GITHUB_OUTPUT
      #     fi

      - name: 提交并推送更改
        if: steps.mirror_script.outputs.no_changes != 'true'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "更新 packages 目录"
          file_pattern: packages/*
      
      - name: 获取最新提交信息
        if: steps.mirror_script.outputs.no_changes != 'true'
        id: get_commit_info
        run: |
          git pull
          commit_sha=$(git rev-parse HEAD)
          short_sha=$(git rev-parse --short HEAD)
          
          echo "commit_sha=$commit_sha" >> $GITHUB_OUTPUT
          echo "short_sha=$short_sha" >> $GITHUB_OUTPUT
          
          echo "Latest commit: $commit_sha"
          git show --stat
      
      - name: 生成 release 名称和 tag
        if: steps.mirror_script.outputs.no_changes != 'true'
        id: generate_release_info
        run: |
          release_title="Release $(date '+%Y-%m-%d %H:%M')"
          release_name="release-$(date '+%Y%m%d%H%M%S')"

          echo "release_title=$release_title" >> $GITHUB_OUTPUT
          echo "release_name=$release_name" >> $GITHUB_OUTPUT

      - name: 创建唯一 Release
        if: steps.mirror_script.outputs.no_changes != 'true'
        run: |
          gh release create "${{ steps.generate_release_info.outputs.release_name }}" \
            --target ${{ steps.get_commit_info.outputs.commit_sha }} \
            --title "${{ steps.generate_release_info.outputs.release_title }}" \
            --notes "Auto-generated at $(date)" \
            packages/*

      - name: 同步 latest
        if: steps.mirror_script.outputs.no_changes != 'true'
        run: |
            if gh release view latest --json tagName > /dev/null 2>&1; then
                echo "最新Release存在, 更新资源..."
                for asset in $(gh release view latest --json assets --jq '.assets[].name'); do
                    gh release delete-asset latest "$asset" --yes || true
                done
                
                for file in packages/*; do
                    if [ -f "$file" ]; then
                        gh release upload latest "$file" || true
                    fi
                done
            else
                echo "Creating new latest release..."
                gh release create "latest" \
                    --target ${{ steps.get_commit_info.outputs.commit_sha }} \
                    --title "Latest Release" \
                    --notes "Auto-generated at $(date)" \
                    --latest \
                    packages/*
            fi